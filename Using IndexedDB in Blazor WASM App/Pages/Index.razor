@page "/"
@inject IIndexedDbFactory DbFactory
<h1>People</h1>

@if (people != null)
{
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>First name</th>
                    <th>Last name</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var person in people)
            {
                        <tr>
                            <td>@person.Id</td>
                            <td>@person.FirstName</td>
                            <td>@person.LastName</td>
                        </tr>
            }
            </tbody>
        </table>
}
<fieldset>
    <legend>Add new person</legend>
    <EditForm Model="@newPerson" OnValidSubmit="@SaveNewPerson">
        <InputText @bind-Value="@newPerson.FirstName" placeholder="First name..." />
        <InputText @bind-Value="@newPerson.LastName" placeholder="Last name..." />
        <button type="submit">Add</button>

        <p><ValidationSummary /></p>
        <DataAnnotationsValidator />
    </EditForm>
</fieldset>
@code {
    List<Person>? people;

    protected override async Task OnInitializedAsync()
    {
        using var db = await DbFactory.Create<ExampleDb>();
        people = db.People.ToList();
    }
    Person newPerson = new Person();

    async Task SaveNewPerson ()
    {
        using var db = await this.DbFactory.Create<ExampleDb>();
        db.People.Add(newPerson);
        await db.SaveChanges();

        // Refresh list and reset the form
        newPerson = new Person();
        await OnInitializedAsync();
    }
}
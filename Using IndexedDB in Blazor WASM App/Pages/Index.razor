@page "/"
@inject IIndexedDbFactory DbFactory
<h1>employee</h1>

@if (employee != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>First name</th>
                <th>Last name</th>
                <th></th> <!-- Delete column -->
            </tr>
        </thead>
        <tbody>
            @foreach (var Employee in employee)
            {
                <tr>
                    <td>@Employee.Id</td>
                    <td>@Employee.FirstName</td>
                    <td>@Employee.LastName</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteEmployee(Employee.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<fieldset>
    <legend>Add new Employee</legend>
    <EditForm Model="@newEmployee" OnValidSubmit="@SaveNewEmployee">
        <InputText @bind-Value="@newEmployee.FirstName" placeholder="First name..." />
        <InputText @bind-Value="@newEmployee.LastName" placeholder="Last name..." />
        <button type="submit">Add</button>

        <p><ValidationSummary /></p>
        <DataAnnotationsValidator />
    </EditForm>
</fieldset>
@code {
    List<Employee>? employee;

    protected override async Task OnInitializedAsync ()
    {
        await RefreshEmployeeList();
    }

    Employee newEmployee = new Employee();

    async Task RefreshEmployeeList ()
    {
        using var db = await DbFactory.Create<IndexDb>();
        employee = db.employee.ToList();
    }

    async Task SaveNewEmployee ()
    {
        using var db = await this.DbFactory.Create<IndexDb>();
        db.employee.Add(newEmployee);
        await db.SaveChanges();

        // Refresh list and reset the form
        newEmployee = new Employee();
        await RefreshEmployeeList();
    }

    async Task DeleteEmployee ( int id )
    {
        using var db = await this.DbFactory.Create<IndexDb>();
        var employeeToDelete = db.employee.FirstOrDefault(e => e.Id == id);
        if (employeeToDelete != null)
        {
            db.employee.Remove(employeeToDelete);
            await db.SaveChanges();
            await RefreshEmployeeList();
        }
    }
}
